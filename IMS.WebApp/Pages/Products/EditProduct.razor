@page "/editproduct/{ProdId:int}";

@inject NavigationManager NavigationManager;
@inject IViewProductByIdUseCase ViewProductByIdUseCase;
@inject IEditProductUseCase EditProductUseCase;

<h3>Edit Product</h3>

<br />

<EditForm Model="product" OnValidSubmit="SaveProduct">

    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="name">Product Name</label>
        <InputText
            id="name"
            class="form-control"
            @bind-Value = "product.ProductName">
        </InputText>
    </div>
    <div class="form-group">
        <label for="quantity">Quantity</label>
        <InputNumber id="quantity"
                   class="form-control"
                   @bind-Value="product.Quantity">
        </InputNumber>
    </div>
    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber id="price"
                     class="form-control"
                     @bind-Value="product.Price">
        </InputNumber>
    </div>
    <div class="form-group">
        <label for="inventories">Inventories</label>
        <ProductInventoriesComponent Product="product"/>
    </div>
    <br/>
    <button
        type="submit"
        class="btn btn-primary">
        Save</button>
    <button
        type="button"
        class="btn btn-primary"
        @onclick="Cancel">
        Cancel</button>

</EditForm>

@code {
    [Parameter]
    public int ProdId { get; set; }

    private Product product = new();

    protected async override Task OnParametersSetAsync()
    {
        product = await ViewProductByIdUseCase.ExecuteAsync(ProdId);
    }

    private async Task SaveProduct()
    {
        await EditProductUseCase.ExecuteAsync(product);
        NavigationManager.NavigateTo("/products");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/products");
    }
}
